package com.github.ptosda.projectvalidationmanager.services

import com.github.ptosda.projectvalidationmanager.model.Artifacts
import com.github.ptosda.projectvalidationmanager.model.VulnerabilitiesEvaluation
import net.ossindex.common.IPackageRequest
import net.ossindex.common.OssIndexApi
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.io.IOException

@Service
class VulnerabilityService {
    val logger = LoggerFactory.getLogger(VulnerabilityService::class.java)

    fun javaWrapper(dependencies: ArrayList<Artifacts>, packageManager: String) : List<VulnerabilitiesEvaluation>? {
        logger.info("Starting request for ossIndexApi.")
        val request: IPackageRequest = OssIndexApi.createPackageRequest()

        dependencies.stream().forEach{
            request.add(it.pm, it.group, it.name, it.version)
        }

        logger.info("Added {} dependencies to request", dependencies.size)

        try {
            val packageRequests = request.run()
            val vulnerabilitiesEvaluation = ArrayList<VulnerabilitiesEvaluation>()

            packageRequests.forEach({
                vulnerabilitiesEvaluation.add(
                        VulnerabilitiesEvaluation(
                                it.name,
                                it.version,
                                it.vulnerabilityMatches,
                                it.vulnerabilities ?: emptyList()
                        )
                )
            })

            logger.info("All vulnerabilities for the dependencies found. Returning.")
            return vulnerabilitiesEvaluation
        } catch (e: IOException) {
            logger.warn("Unsuccessful request to OssIndex API")
            return null
        }
    }

}