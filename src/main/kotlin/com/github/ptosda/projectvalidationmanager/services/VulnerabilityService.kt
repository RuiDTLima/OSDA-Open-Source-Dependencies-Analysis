package com.github.ptosda.projectvalidationmanager.services

import com.github.ptosda.projectvalidationmanager.model.Artifacts
import com.github.ptosda.projectvalidationmanager.model.VulnerabilitiesEvaluation
import com.github.ptosda.projectvalidationmanager.model.Vulnerability
import net.ossindex.common.IPackageRequest
import net.ossindex.common.OssIndexApi
//import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.io.IOException
import java.util.stream.Collectors

@Service
class VulnerabilityService {

    //val logger = LoggerFactory.getLogger(VulnerabilityService::class.java)

    fun javaWrapper(dependencies: ArrayList<Artifacts>) : List<VulnerabilitiesEvaluation>? {
        val request: IPackageRequest = OssIndexApi.createPackageRequest()

        dependencies.stream().forEach{
            request.add(it.pm, it.group, it.name, it.version)
        }

        try {
            val packageRequests = request.run()

            return packageRequests.stream().map{
                VulnerabilitiesEvaluation(it.name, it.version, it.vulnerabilityMatches,
                        it.vulnerabilities.stream().map {
                            Vulnerability(it.title, it.id, it.description, it.references, it.versions)
                        }.collect(Collectors.toList()))
            }.collect(Collectors.toList())

        } catch (e: IOException) {
            //logger.warn("Unsuccessful request to OssIndex API")
            return null
        }
    }

}