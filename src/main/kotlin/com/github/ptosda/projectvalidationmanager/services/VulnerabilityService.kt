package com.github.ptosda.projectvalidationmanager.services

import com.github.ptosda.projectvalidationmanager.model.Artifacts
import com.github.ptosda.projectvalidationmanager.model.VulnerabilitiesEvaluationOutput
import com.github.ptosda.projectvalidationmanager.model.VulnerabilityOutput
import net.ossindex.common.IPackageRequest
import net.ossindex.common.OssIndexApi
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.io.*

@Service
class VulnerabilityService {
    val logger : Logger = LoggerFactory.getLogger(VulnerabilityService::class.java)

    //TODO Manter ordem dos elementos entre o pedido e a resposta
    /**
     * Function to query the external API about the vulnerabilities of the dependencies.
     * @param artifacts The set of dependencies to search for vulnerabilities.
     * @return A list of dependencies that indicate their vulnerability.
     */
    fun getVulnerabilities(artifacts: ArrayList<Artifacts>): List<VulnerabilitiesEvaluationOutput>? {
        logger.info("Starting request for ossIndexApi.")
        val request: IPackageRequest = OssIndexApi.createPackageRequest()

        artifacts.stream().forEach{
            request.add(it.pm, it.group, it.name, it.version)
        }

        logger.info("Added {} dependencies to request", artifacts.size)

        try {
            val packageRequests = request.run()
            val vulnerabilitiesEvaluation = ArrayList<VulnerabilitiesEvaluationOutput>()

            packageRequests.forEach({
                val dependencyName = if(it.group.isNullOrBlank()) it.name else "${it.name}:${it.group}"
                vulnerabilitiesEvaluation.add(
                        VulnerabilitiesEvaluationOutput(
                                dependencyName,
                                it.version,
                                it.vulnerabilityMatches,
                                it.vulnerabilities?.map {
                                    VulnerabilityOutput(
                                            it.title,
                                            it.id,
                                            it.description,
                                            it.references,
                                            it.versions
                                    )
                                } ?: arrayListOf()
                        )
                )
            })

            logger.info("All vulnerabilities for the dependencies found. Returning.")
            return vulnerabilitiesEvaluation
        } catch (e: IOException) {
            logger.warn("Unsuccessful request to OssIndex API")
            return null
        }
    }
}